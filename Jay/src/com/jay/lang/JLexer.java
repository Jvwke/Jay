package com.jay.lang;

// Generated from J.g4 by ANTLR 4.7.1
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class JLexer extends Lexer {
    static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

    protected static final DFA[] _decisionToDFA;
    protected static final PredictionContextCache _sharedContextCache =
        new PredictionContextCache();
    public static final int
        T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
        T__9=10, T__10=11, AND=12, OR=13, BEGIN=14, END=15, PROGRAM=16, FUNCTION=17, 
        AS=18, RETURN=19, TO=20, NOT=21, IF=22, ELSE=23, WHILE=24, FOR=25, STEP=26, 
        THEN=27, VAR=28, TRUE=29, FALSE=30, WRITE=31, READ=32, TYPEOF=33, DYNAMIC=34, 
        IMPORT=35, CONST_TYPE=36, TYPE=37, COMPARE_OP=38, CONST_INT=39, CONST_NATUAL_NO=40, 
        CONST_FLOAT=41, CONST_STRING=42, CONST_NORMAL_STRING=43, CONST_CHAR_STRING=44, 
        POSITIVE_DIGIT=45, DIGIT=46, ID=47, COMMENT=48, LINE_COMMENT=49, WS=50;
    public static String[] channelNames = {
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    };

    public static String[] modeNames = {
        "DEFAULT_MODE"
    };

    public static final String[] ruleNames = {
        "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
        "T__9", "T__10", "AND", "OR", "BEGIN", "END", "PROGRAM", "FUNCTION", "AS", 
        "RETURN", "TO", "NOT", "IF", "ELSE", "WHILE", "FOR", "STEP", "THEN", "VAR", 
        "TRUE", "FALSE", "WRITE", "READ", "TYPEOF", "DYNAMIC", "IMPORT", "CONST_TYPE", 
        "TYPE", "COMPARE_OP", "CONST_INT", "CONST_NATUAL_NO", "CONST_FLOAT", "CONST_STRING", 
        "CONST_NORMAL_STRING", "CONST_CHAR_STRING", "ESCAPE_CHAR", "POSITIVE_DIGIT", 
        "DIGIT", "ID", "COMMENT", "LINE_COMMENT", "WS"
    };

    private static final String[] _LITERAL_NAMES = {
        null, "'('", "')'", "'['", "']'", "'='", "'+'", "'-'", "'*'", "'/'", "','", 
        "'[]'", null, null, "'begin'", "'end'", "'program'", "'function'", "'as'", 
        "'return'", "'to'", null, "'if'", "'else'", "'while'", "'for'", "'step'", 
        "'then'", "'var'", "'true'", "'false'", "'write'", "'read'", "'typeof'", 
        "'dynamic'", "'import'"
    };
    private static final String[] _SYMBOLIC_NAMES = {
        null, null, null, null, null, null, null, null, null, null, null, null, 
        "AND", "OR", "BEGIN", "END", "PROGRAM", "FUNCTION", "AS", "RETURN", "TO", 
        "NOT", "IF", "ELSE", "WHILE", "FOR", "STEP", "THEN", "VAR", "TRUE", "FALSE", 
        "WRITE", "READ", "TYPEOF", "DYNAMIC", "IMPORT", "CONST_TYPE", "TYPE", 
        "COMPARE_OP", "CONST_INT", "CONST_NATUAL_NO", "CONST_FLOAT", "CONST_STRING", 
        "CONST_NORMAL_STRING", "CONST_CHAR_STRING", "POSITIVE_DIGIT", "DIGIT", 
        "ID", "COMMENT", "LINE_COMMENT", "WS"
    };
    public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

    /**
     * @deprecated Use {@link #VOCABULARY} instead.
     */
    @Deprecated
    public static final String[] tokenNames;
    static {
        tokenNames = new String[_SYMBOLIC_NAMES.length];
        for (int i = 0; i < tokenNames.length; i++) {
            tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }

            if (tokenNames[i] == null) {
                tokenNames[i] = "<INVALID>";
            }
        }
    }

    @Override
    @Deprecated
    public String[] getTokenNames() {
        return tokenNames;
    }

    @Override

    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }


    public JLexer(CharStream input) {
        super(input);
        _interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
    }

    @Override
    public String getGrammarFileName() { return "J.g4"; }

    @Override
    public String[] getRuleNames() { return ruleNames; }

    @Override
    public String getSerializedATN() { return _serializedATN; }

    @Override
    public String[] getChannelNames() { return channelNames; }

    @Override
    public String[] getModeNames() { return modeNames; }

    @Override
    public ATN getATN() { return _ATN; }

    public static final String _serializedATN =
        "\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\64\u01a9\b\1\4\2"+
        "\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
        "\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
        "\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
        "\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
        " \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
        "+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
        "\t\64\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t"+
        "\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\5\r\u0086\n\r\3\16"+
        "\3\16\3\16\3\16\5\16\u008c\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20"+
        "\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22"+
        "\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24"+
        "\3\24\3\25\3\25\3\25\3\26\3\26\3\26\3\26\5\26\u00ba\n\26\3\27\3\27\3\27"+
        "\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32"+
        "\3\32\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35"+
        "\3\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3 "+
        "\3 \3 \3 \3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3"+
        "#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3"+
        "%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0128\n%\3"+
        "&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0138\n\'\3(\5"+
        "(\u013b\n(\3(\3(\3)\3)\3)\7)\u0142\n)\f)\16)\u0145\13)\5)\u0147\n)\3*"+
        "\3*\3*\6*\u014c\n*\r*\16*\u014d\3*\3*\6*\u0152\n*\r*\16*\u0153\5*\u0156"+
        "\n*\3+\3+\5+\u015a\n+\3,\3,\3,\7,\u015f\n,\f,\16,\u0162\13,\3,\3,\3-\3"+
        "-\3-\7-\u0169\n-\f-\16-\u016c\13-\3-\3-\3.\3.\3.\3.\5.\u0174\n.\3.\5."+
        "\u0177\n.\3/\3/\3\60\3\60\5\60\u017d\n\60\3\61\3\61\7\61\u0181\n\61\f"+
        "\61\16\61\u0184\13\61\3\62\3\62\3\62\3\62\7\62\u018a\n\62\f\62\16\62\u018d"+
        "\13\62\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\5\63\u0199\n"+
        "\63\3\63\7\63\u019c\n\63\f\63\16\63\u019f\13\63\3\63\3\63\3\64\6\64\u01a4"+
        "\n\64\r\64\16\64\u01a5\3\64\3\64\3\u018b\2\65\3\3\5\4\7\5\t\6\13\7\r\b"+
        "\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26"+
        "+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S"+
        "+U,W-Y.[\2]/_\60a\61c\62e\63g\64\3\2\n\4\2$$^^\4\2))^^\b\2$$))^^ppttv"+
        "v\3\2\63;\6\2&&C\\aac|\7\2&&\62;C\\aac|\4\2\f\f\17\17\5\2\13\f\16\17\""+
        "\"\2\u01c9\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2"+
        "\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27"+
        "\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2"+
        "\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2"+
        "\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2"+
        "\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2"+
        "\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S"+
        "\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2"+
        "\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\3i\3\2\2\2\5k\3\2\2\2\7m\3\2\2\2"+
        "\to\3\2\2\2\13q\3\2\2\2\rs\3\2\2\2\17u\3\2\2\2\21w\3\2\2\2\23y\3\2\2\2"+
        "\25{\3\2\2\2\27}\3\2\2\2\31\u0085\3\2\2\2\33\u008b\3\2\2\2\35\u008d\3"+
        "\2\2\2\37\u0093\3\2\2\2!\u0097\3\2\2\2#\u009f\3\2\2\2%\u00a8\3\2\2\2\'"+
        "\u00ab\3\2\2\2)\u00b2\3\2\2\2+\u00b9\3\2\2\2-\u00bb\3\2\2\2/\u00be\3\2"+
        "\2\2\61\u00c3\3\2\2\2\63\u00c9\3\2\2\2\65\u00cd\3\2\2\2\67\u00d2\3\2\2"+
        "\29\u00d7\3\2\2\2;\u00db\3\2\2\2=\u00e0\3\2\2\2?\u00e6\3\2\2\2A\u00ec"+
        "\3\2\2\2C\u00f1\3\2\2\2E\u00f8\3\2\2\2G\u0100\3\2\2\2I\u0127\3\2\2\2K"+
        "\u0129\3\2\2\2M\u0137\3\2\2\2O\u013a\3\2\2\2Q\u0146\3\2\2\2S\u0155\3\2"+
        "\2\2U\u0159\3\2\2\2W\u015b\3\2\2\2Y\u0165\3\2\2\2[\u0176\3\2\2\2]\u0178"+
        "\3\2\2\2_\u017c\3\2\2\2a\u017e\3\2\2\2c\u0185\3\2\2\2e\u0198\3\2\2\2g"+
        "\u01a3\3\2\2\2ij\7*\2\2j\4\3\2\2\2kl\7+\2\2l\6\3\2\2\2mn\7]\2\2n\b\3\2"+
        "\2\2op\7_\2\2p\n\3\2\2\2qr\7?\2\2r\f\3\2\2\2st\7-\2\2t\16\3\2\2\2uv\7"+
        "/\2\2v\20\3\2\2\2wx\7,\2\2x\22\3\2\2\2yz\7\61\2\2z\24\3\2\2\2{|\7.\2\2"+
        "|\26\3\2\2\2}~\7]\2\2~\177\7_\2\2\177\30\3\2\2\2\u0080\u0081\7c\2\2\u0081"+
        "\u0082\7p\2\2\u0082\u0086\7f\2\2\u0083\u0084\7(\2\2\u0084\u0086\7(\2\2"+
        "\u0085\u0080\3\2\2\2\u0085\u0083\3\2\2\2\u0086\32\3\2\2\2\u0087\u0088"+
        "\7q\2\2\u0088\u008c\7t\2\2\u0089\u008a\7~\2\2\u008a\u008c\7~\2\2\u008b"+
        "\u0087\3\2\2\2\u008b\u0089\3\2\2\2\u008c\34\3\2\2\2\u008d\u008e\7d\2\2"+
        "\u008e\u008f\7g\2\2\u008f\u0090\7i\2\2\u0090\u0091\7k\2\2\u0091\u0092"+
        "\7p\2\2\u0092\36\3\2\2\2\u0093\u0094\7g\2\2\u0094\u0095\7p\2\2\u0095\u0096"+
        "\7f\2\2\u0096 \3\2\2\2\u0097\u0098\7r\2\2\u0098\u0099\7t\2\2\u0099\u009a"+
        "\7q\2\2\u009a\u009b\7i\2\2\u009b\u009c\7t\2\2\u009c\u009d\7c\2\2\u009d"+
        "\u009e\7o\2\2\u009e\"\3\2\2\2\u009f\u00a0\7h\2\2\u00a0\u00a1\7w\2\2\u00a1"+
        "\u00a2\7p\2\2\u00a2\u00a3\7e\2\2\u00a3\u00a4\7v\2\2\u00a4\u00a5\7k\2\2"+
        "\u00a5\u00a6\7q\2\2\u00a6\u00a7\7p\2\2\u00a7$\3\2\2\2\u00a8\u00a9\7c\2"+
        "\2\u00a9\u00aa\7u\2\2\u00aa&\3\2\2\2\u00ab\u00ac\7t\2\2\u00ac\u00ad\7"+
        "g\2\2\u00ad\u00ae\7v\2\2\u00ae\u00af\7w\2\2\u00af\u00b0\7t\2\2\u00b0\u00b1"+
        "\7p\2\2\u00b1(\3\2\2\2\u00b2\u00b3\7v\2\2\u00b3\u00b4\7q\2\2\u00b4*\3"+
        "\2\2\2\u00b5\u00b6\7p\2\2\u00b6\u00b7\7q\2\2\u00b7\u00ba\7v\2\2\u00b8"+
        "\u00ba\7#\2\2\u00b9\u00b5\3\2\2\2\u00b9\u00b8\3\2\2\2\u00ba,\3\2\2\2\u00bb"+
        "\u00bc\7k\2\2\u00bc\u00bd\7h\2\2\u00bd.\3\2\2\2\u00be\u00bf\7g\2\2\u00bf"+
        "\u00c0\7n\2\2\u00c0\u00c1\7u\2\2\u00c1\u00c2\7g\2\2\u00c2\60\3\2\2\2\u00c3"+
        "\u00c4\7y\2\2\u00c4\u00c5\7j\2\2\u00c5\u00c6\7k\2\2\u00c6\u00c7\7n\2\2"+
        "\u00c7\u00c8\7g\2\2\u00c8\62\3\2\2\2\u00c9\u00ca\7h\2\2\u00ca\u00cb\7"+
        "q\2\2\u00cb\u00cc\7t\2\2\u00cc\64\3\2\2\2\u00cd\u00ce\7u\2\2\u00ce\u00cf"+
        "\7v\2\2\u00cf\u00d0\7g\2\2\u00d0\u00d1\7r\2\2\u00d1\66\3\2\2\2\u00d2\u00d3"+
        "\7v\2\2\u00d3\u00d4\7j\2\2\u00d4\u00d5\7g\2\2\u00d5\u00d6\7p\2\2\u00d6"+
        "8\3\2\2\2\u00d7\u00d8\7x\2\2\u00d8\u00d9\7c\2\2\u00d9\u00da\7t\2\2\u00da"+
        ":\3\2\2\2\u00db\u00dc\7v\2\2\u00dc\u00dd\7t\2\2\u00dd\u00de\7w\2\2\u00de"+
        "\u00df\7g\2\2\u00df<\3\2\2\2\u00e0\u00e1\7h\2\2\u00e1\u00e2\7c\2\2\u00e2"+
        "\u00e3\7n\2\2\u00e3\u00e4\7u\2\2\u00e4\u00e5\7g\2\2\u00e5>\3\2\2\2\u00e6"+
        "\u00e7\7y\2\2\u00e7\u00e8\7t\2\2\u00e8\u00e9\7k\2\2\u00e9\u00ea\7v\2\2"+
        "\u00ea\u00eb\7g\2\2\u00eb@\3\2\2\2\u00ec\u00ed\7t\2\2\u00ed\u00ee\7g\2"+
        "\2\u00ee\u00ef\7c\2\2\u00ef\u00f0\7f\2\2\u00f0B\3\2\2\2\u00f1\u00f2\7"+
        "v\2\2\u00f2\u00f3\7{\2\2\u00f3\u00f4\7r\2\2\u00f4\u00f5\7g\2\2\u00f5\u00f6"+
        "\7q\2\2\u00f6\u00f7\7h\2\2\u00f7D\3\2\2\2\u00f8\u00f9\7f\2\2\u00f9\u00fa"+
        "\7{\2\2\u00fa\u00fb\7p\2\2\u00fb\u00fc\7c\2\2\u00fc\u00fd\7o\2\2\u00fd"+
        "\u00fe\7k\2\2\u00fe\u00ff\7e\2\2\u00ffF\3\2\2\2\u0100\u0101\7k\2\2\u0101"+
        "\u0102\7o\2\2\u0102\u0103\7r\2\2\u0103\u0104\7q\2\2\u0104\u0105\7t\2\2"+
        "\u0105\u0106\7v\2\2\u0106H\3\2\2\2\u0107\u0108\7c\2\2\u0108\u0109\7t\2"+
        "\2\u0109\u010a\7t\2\2\u010a\u010b\7c\2\2\u010b\u0128\7{\2\2\u010c\u010d"+
        "\7d\2\2\u010d\u010e\7q\2\2\u010e\u010f\7q\2\2\u010f\u0128\7n\2\2\u0110"+
        "\u0111\7k\2\2\u0111\u0112\7p\2\2\u0112\u0128\7v\2\2\u0113\u0114\7p\2\2"+
        "\u0114\u0115\7k\2\2\u0115\u0128\7n\2\2\u0116\u0117\7q\2\2\u0117\u0118"+
        "\7d\2\2\u0118\u0119\7l\2\2\u0119\u011a\7g\2\2\u011a\u011b\7e\2\2\u011b"+
        "\u0128\7v\2\2\u011c\u011d\7h\2\2\u011d\u011e\7n\2\2\u011e\u011f\7q\2\2"+
        "\u011f\u0120\7c\2\2\u0120\u0128\7v\2\2\u0121\u0122\7u\2\2\u0122\u0123"+
        "\7v\2\2\u0123\u0124\7t\2\2\u0124\u0125\7k\2\2\u0125\u0126\7p\2\2\u0126"+
        "\u0128\7i\2\2\u0127\u0107\3\2\2\2\u0127\u010c\3\2\2\2\u0127\u0110\3\2"+
        "\2\2\u0127\u0113\3\2\2\2\u0127\u0116\3\2\2\2\u0127\u011c\3\2\2\2\u0127"+
        "\u0121\3\2\2\2\u0128J\3\2\2\2\u0129\u012a\7>\2\2\u012a\u012b\5I%\2\u012b"+
        "\u012c\7@\2\2\u012cL\3\2\2\2\u012d\u0138\7>\2\2\u012e\u012f\7>\2\2\u012f"+
        "\u0138\7?\2\2\u0130\u0138\7@\2\2\u0131\u0132\7@\2\2\u0132\u0138\7?\2\2"+
        "\u0133\u0134\7?\2\2\u0134\u0138\7?\2\2\u0135\u0136\7#\2\2\u0136\u0138"+
        "\7?\2\2\u0137\u012d\3\2\2\2\u0137\u012e\3\2\2\2\u0137\u0130\3\2\2\2\u0137"+
        "\u0131\3\2\2\2\u0137\u0133\3\2\2\2\u0137\u0135\3\2\2\2\u0138N\3\2\2\2"+
        "\u0139\u013b\7/\2\2\u013a\u0139\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013c"+
        "\3\2\2\2\u013c\u013d\5Q)\2\u013dP\3\2\2\2\u013e\u0147\7\62\2\2\u013f\u0143"+
        "\5]/\2\u0140\u0142\5_\60\2\u0141\u0140\3\2\2\2\u0142\u0145\3\2\2\2\u0143"+
        "\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0147\3\2\2\2\u0145\u0143\3\2"+
        "\2\2\u0146\u013e\3\2\2\2\u0146\u013f\3\2\2\2\u0147R\3\2\2\2\u0148\u0149"+
        "\5O(\2\u0149\u014b\7\60\2\2\u014a\u014c\5_\60\2\u014b\u014a\3\2\2\2\u014c"+
        "\u014d\3\2\2\2\u014d\u014b\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u0156\3\2"+
        "\2\2\u014f\u0151\7\60\2\2\u0150\u0152\5_\60\2\u0151\u0150\3\2\2\2\u0152"+
        "\u0153\3\2\2\2\u0153\u0151\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0156\3\2"+
        "\2\2\u0155\u0148\3\2\2\2\u0155\u014f\3\2\2\2\u0156T\3\2\2\2\u0157\u015a"+
        "\5W,\2\u0158\u015a\5Y-\2\u0159\u0157\3\2\2\2\u0159\u0158\3\2\2\2\u015a"+
        "V\3\2\2\2\u015b\u0160\7$\2\2\u015c\u015f\5[.\2\u015d\u015f\n\2\2\2\u015e"+
        "\u015c\3\2\2\2\u015e\u015d\3\2\2\2\u015f\u0162\3\2\2\2\u0160\u015e\3\2"+
        "\2\2\u0160\u0161\3\2\2\2\u0161\u0163\3\2\2\2\u0162\u0160\3\2\2\2\u0163"+
        "\u0164\7$\2\2\u0164X\3\2\2\2\u0165\u016a\7)\2\2\u0166\u0169\5[.\2\u0167"+
        "\u0169\n\3\2\2\u0168\u0166\3\2\2\2\u0168\u0167\3\2\2\2\u0169\u016c\3\2"+
        "\2\2\u016a\u0168\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u016d\3\2\2\2\u016c"+
        "\u016a\3\2\2\2\u016d\u016e\7)\2\2\u016eZ\3\2\2\2\u016f\u0170\7^\2\2\u0170"+
        "\u0177\t\4\2\2\u0171\u0173\7^\2\2\u0172\u0174\7\17\2\2\u0173\u0172\3\2"+
        "\2\2\u0173\u0174\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0177\7\f\2\2\u0176"+
        "\u016f\3\2\2\2\u0176\u0171\3\2\2\2\u0177\\\3\2\2\2\u0178\u0179\t\5\2\2"+
        "\u0179^\3\2\2\2\u017a\u017d\5]/\2\u017b\u017d\7\62\2\2\u017c\u017a\3\2"+
        "\2\2\u017c\u017b\3\2\2\2\u017d`\3\2\2\2\u017e\u0182\t\6\2\2\u017f\u0181"+
        "\t\7\2\2\u0180\u017f\3\2\2\2\u0181\u0184\3\2\2\2\u0182\u0180\3\2\2\2\u0182"+
        "\u0183\3\2\2\2\u0183b\3\2\2\2\u0184\u0182\3\2\2\2\u0185\u0186\7\61\2\2"+
        "\u0186\u0187\7,\2\2\u0187\u018b\3\2\2\2\u0188\u018a\13\2\2\2\u0189\u0188"+
        "\3\2\2\2\u018a\u018d\3\2\2\2\u018b\u018c\3\2\2\2\u018b\u0189\3\2\2\2\u018c"+
        "\u018e\3\2\2\2\u018d\u018b\3\2\2\2\u018e\u018f\7,\2\2\u018f\u0190\7\61"+
        "\2\2\u0190\u0191\3\2\2\2\u0191\u0192\b\62\2\2\u0192d\3\2\2\2\u0193\u0194"+
        "\7\61\2\2\u0194\u0199\7\61\2\2\u0195\u0199\7%\2\2\u0196\u0197\7/\2\2\u0197"+
        "\u0199\7/\2\2\u0198\u0193\3\2\2\2\u0198\u0195\3\2\2\2\u0198\u0196\3\2"+
        "\2\2\u0199\u019d\3\2\2\2\u019a\u019c\n\b\2\2\u019b\u019a\3\2\2\2\u019c"+
        "\u019f\3\2\2\2\u019d\u019b\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u01a0\3\2"+
        "\2\2\u019f\u019d\3\2\2\2\u01a0\u01a1\b\63\2\2\u01a1f\3\2\2\2\u01a2\u01a4"+
        "\t\t\2\2\u01a3\u01a2\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a5"+
        "\u01a6\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a8\b\64\3\2\u01a8h\3\2\2\2"+
        "\33\2\u0085\u008b\u00b9\u0127\u0137\u013a\u0143\u0146\u014d\u0153\u0155"+
        "\u0159\u015e\u0160\u0168\u016a\u0173\u0176\u017c\u0182\u018b\u0198\u019d"+
        "\u01a5\4\b\2\2\2\3\2";
    public static final ATN _ATN =
        new ATNDeserializer().deserialize(_serializedATN.toCharArray());
    static {
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
        for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
            _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }
    }
}
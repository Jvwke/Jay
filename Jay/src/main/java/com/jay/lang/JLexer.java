package com.jay.lang;

// Generated from J.g4 by ANTLR 4.7.1
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class JLexer extends Lexer {
    static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

    protected static final DFA[] _decisionToDFA;
    protected static final PredictionContextCache _sharedContextCache =
        new PredictionContextCache();
    public static final int
        T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
        T__9=10, T__10=11, AND=12, OR=13, BEGIN=14, END=15, PROGRAM=16, FUNCTION=17, 
        AS=18, RETURN=19, BREAK=20, CONTINUE=21, TO=22, NOT=23, IF=24, ELSE=25, 
        WHILE=26, FOR=27, STEP=28, THEN=29, VAR=30, TRUE=31, FALSE=32, TYPEOF=33, 
        DYNAMIC=34, IMPORT=35, NATIVE=36, CONST_TYPE=37, TYPE=38, COMPARE_OP=39, 
        CONST_INT=40, CONST_NATUAL_NO=41, CONST_FLOAT=42, CONST_STRING=43, CONST_NORMAL_STRING=44, 
        CONST_CHAR_STRING=45, POSITIVE_DIGIT=46, DIGIT=47, ID=48, COMMENT=49, 
        LINE_COMMENT=50, WS=51;
    public static String[] channelNames = {
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    };

    public static String[] modeNames = {
        "DEFAULT_MODE"
    };

    public static final String[] ruleNames = {
        "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
        "T__9", "T__10", "AND", "OR", "BEGIN", "END", "PROGRAM", "FUNCTION", "AS", 
        "RETURN", "BREAK", "CONTINUE", "TO", "NOT", "IF", "ELSE", "WHILE", "FOR", 
        "STEP", "THEN", "VAR", "TRUE", "FALSE", "TYPEOF", "DYNAMIC", "IMPORT", 
        "NATIVE", "CONST_TYPE", "TYPE", "COMPARE_OP", "CONST_INT", "CONST_NATUAL_NO", 
        "CONST_FLOAT", "CONST_STRING", "CONST_NORMAL_STRING", "CONST_CHAR_STRING", 
        "ESCAPE_CHAR", "POSITIVE_DIGIT", "DIGIT", "ID", "COMMENT", "LINE_COMMENT", 
        "WS"
    };

    private static final String[] _LITERAL_NAMES = {
        null, "'('", "')'", "'['", "']'", "'='", "'+'", "'-'", "'*'", "'/'", "','", 
        "'[]'", null, null, "'begin'", "'end'", "'program'", "'function'", "'as'", 
        "'return'", "'break'", "'continue'", "'to'", null, "'if'", "'else'", "'while'", 
        "'for'", "'step'", "'then'", "'var'", "'true'", "'false'", "'typeof'", 
        "'dynamic'", "'import'", "'native'"
    };
    private static final String[] _SYMBOLIC_NAMES = {
        null, null, null, null, null, null, null, null, null, null, null, null, 
        "AND", "OR", "BEGIN", "END", "PROGRAM", "FUNCTION", "AS", "RETURN", "BREAK", 
        "CONTINUE", "TO", "NOT", "IF", "ELSE", "WHILE", "FOR", "STEP", "THEN", 
        "VAR", "TRUE", "FALSE", "TYPEOF", "DYNAMIC", "IMPORT", "NATIVE", "CONST_TYPE", 
        "TYPE", "COMPARE_OP", "CONST_INT", "CONST_NATUAL_NO", "CONST_FLOAT", "CONST_STRING", 
        "CONST_NORMAL_STRING", "CONST_CHAR_STRING", "POSITIVE_DIGIT", "DIGIT", 
        "ID", "COMMENT", "LINE_COMMENT", "WS"
    };
    public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

    /**
     * @deprecated Use {@link #VOCABULARY} instead.
     */
    @Deprecated
    public static final String[] tokenNames;
    static {
        tokenNames = new String[_SYMBOLIC_NAMES.length];
        for (int i = 0; i < tokenNames.length; i++) {
            tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }

            if (tokenNames[i] == null) {
                tokenNames[i] = "<INVALID>";
            }
        }
    }

    @Override
    @Deprecated
    public String[] getTokenNames() {
        return tokenNames;
    }

    @Override

    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }


    public JLexer(CharStream input) {
        super(input);
        _interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
    }

    @Override
    public String getGrammarFileName() { return "J.g4"; }

    @Override
    public String[] getRuleNames() { return ruleNames; }

    @Override
    public String getSerializedATN() { return _serializedATN; }

    @Override
    public String[] getChannelNames() { return channelNames; }

    @Override
    public String[] getModeNames() { return modeNames; }

    @Override
    public ATN getATN() { return _ATN; }

    public static final String _serializedATN =
        "\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\65\u01b6\b\1\4\2"+
        "\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
        "\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
        "\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
        "\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
        " \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
        "+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
        "\t\64\4\65\t\65\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3"+
        "\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\5\r\u0088"+
        "\n\r\3\16\3\16\3\16\3\16\5\16\u008e\n\16\3\17\3\17\3\17\3\17\3\17\3\17"+
        "\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22"+
        "\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\24"+
        "\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26"+
        "\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\30\5\30\u00cb\n\30"+
        "\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33"+
        "\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36"+
        "\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\""+
        "\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%"+
        "\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&"+
        "\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0135\n&\3\'\3\'\3\'\3\'\3(\3"+
        "(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0145\n(\3)\5)\u0148\n)\3)\3)\3*\3*\3*\7"+
        "*\u014f\n*\f*\16*\u0152\13*\5*\u0154\n*\3+\3+\3+\6+\u0159\n+\r+\16+\u015a"+
        "\3+\3+\6+\u015f\n+\r+\16+\u0160\5+\u0163\n+\3,\3,\5,\u0167\n,\3-\3-\3"+
        "-\7-\u016c\n-\f-\16-\u016f\13-\3-\3-\3.\3.\3.\7.\u0176\n.\f.\16.\u0179"+
        "\13.\3.\3.\3/\3/\3/\3/\5/\u0181\n/\3/\5/\u0184\n/\3\60\3\60\3\61\3\61"+
        "\5\61\u018a\n\61\3\62\3\62\7\62\u018e\n\62\f\62\16\62\u0191\13\62\3\63"+
        "\3\63\3\63\3\63\7\63\u0197\n\63\f\63\16\63\u019a\13\63\3\63\3\63\3\63"+
        "\3\63\3\63\3\64\3\64\3\64\3\64\3\64\5\64\u01a6\n\64\3\64\7\64\u01a9\n"+
        "\64\f\64\16\64\u01ac\13\64\3\64\3\64\3\65\6\65\u01b1\n\65\r\65\16\65\u01b2"+
        "\3\65\3\65\3\u0198\2\66\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f"+
        "\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63"+
        "\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\2_\60a\61c"+
        "\62e\63g\64i\65\3\2\n\4\2$$^^\4\2))^^\b\2$$))^^ppttvv\3\2\63;\6\2&&C\\"+
        "aac|\7\2&&\62;C\\aac|\4\2\f\f\17\17\5\2\13\f\16\17\"\"\2\u01d6\2\3\3\2"+
        "\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17"+
        "\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2"+
        "\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3"+
        "\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3"+
        "\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2"+
        "=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3"+
        "\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2"+
        "\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2"+
        "e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\3k\3\2\2\2\5m\3\2\2\2\7o\3\2\2\2\tq\3"+
        "\2\2\2\13s\3\2\2\2\ru\3\2\2\2\17w\3\2\2\2\21y\3\2\2\2\23{\3\2\2\2\25}"+
        "\3\2\2\2\27\177\3\2\2\2\31\u0087\3\2\2\2\33\u008d\3\2\2\2\35\u008f\3\2"+
        "\2\2\37\u0095\3\2\2\2!\u0099\3\2\2\2#\u00a1\3\2\2\2%\u00aa\3\2\2\2\'\u00ad"+
        "\3\2\2\2)\u00b4\3\2\2\2+\u00ba\3\2\2\2-\u00c3\3\2\2\2/\u00ca\3\2\2\2\61"+
        "\u00cc\3\2\2\2\63\u00cf\3\2\2\2\65\u00d4\3\2\2\2\67\u00da\3\2\2\29\u00de"+
        "\3\2\2\2;\u00e3\3\2\2\2=\u00e8\3\2\2\2?\u00ec\3\2\2\2A\u00f1\3\2\2\2C"+
        "\u00f7\3\2\2\2E\u00fe\3\2\2\2G\u0106\3\2\2\2I\u010d\3\2\2\2K\u0134\3\2"+
        "\2\2M\u0136\3\2\2\2O\u0144\3\2\2\2Q\u0147\3\2\2\2S\u0153\3\2\2\2U\u0162"+
        "\3\2\2\2W\u0166\3\2\2\2Y\u0168\3\2\2\2[\u0172\3\2\2\2]\u0183\3\2\2\2_"+
        "\u0185\3\2\2\2a\u0189\3\2\2\2c\u018b\3\2\2\2e\u0192\3\2\2\2g\u01a5\3\2"+
        "\2\2i\u01b0\3\2\2\2kl\7*\2\2l\4\3\2\2\2mn\7+\2\2n\6\3\2\2\2op\7]\2\2p"+
        "\b\3\2\2\2qr\7_\2\2r\n\3\2\2\2st\7?\2\2t\f\3\2\2\2uv\7-\2\2v\16\3\2\2"+
        "\2wx\7/\2\2x\20\3\2\2\2yz\7,\2\2z\22\3\2\2\2{|\7\61\2\2|\24\3\2\2\2}~"+
        "\7.\2\2~\26\3\2\2\2\177\u0080\7]\2\2\u0080\u0081\7_\2\2\u0081\30\3\2\2"+
        "\2\u0082\u0083\7c\2\2\u0083\u0084\7p\2\2\u0084\u0088\7f\2\2\u0085\u0086"+
        "\7(\2\2\u0086\u0088\7(\2\2\u0087\u0082\3\2\2\2\u0087\u0085\3\2\2\2\u0088"+
        "\32\3\2\2\2\u0089\u008a\7q\2\2\u008a\u008e\7t\2\2\u008b\u008c\7~\2\2\u008c"+
        "\u008e\7~\2\2\u008d\u0089\3\2\2\2\u008d\u008b\3\2\2\2\u008e\34\3\2\2\2"+
        "\u008f\u0090\7d\2\2\u0090\u0091\7g\2\2\u0091\u0092\7i\2\2\u0092\u0093"+
        "\7k\2\2\u0093\u0094\7p\2\2\u0094\36\3\2\2\2\u0095\u0096\7g\2\2\u0096\u0097"+
        "\7p\2\2\u0097\u0098\7f\2\2\u0098 \3\2\2\2\u0099\u009a\7r\2\2\u009a\u009b"+
        "\7t\2\2\u009b\u009c\7q\2\2\u009c\u009d\7i\2\2\u009d\u009e\7t\2\2\u009e"+
        "\u009f\7c\2\2\u009f\u00a0\7o\2\2\u00a0\"\3\2\2\2\u00a1\u00a2\7h\2\2\u00a2"+
        "\u00a3\7w\2\2\u00a3\u00a4\7p\2\2\u00a4\u00a5\7e\2\2\u00a5\u00a6\7v\2\2"+
        "\u00a6\u00a7\7k\2\2\u00a7\u00a8\7q\2\2\u00a8\u00a9\7p\2\2\u00a9$\3\2\2"+
        "\2\u00aa\u00ab\7c\2\2\u00ab\u00ac\7u\2\2\u00ac&\3\2\2\2\u00ad\u00ae\7"+
        "t\2\2\u00ae\u00af\7g\2\2\u00af\u00b0\7v\2\2\u00b0\u00b1\7w\2\2\u00b1\u00b2"+
        "\7t\2\2\u00b2\u00b3\7p\2\2\u00b3(\3\2\2\2\u00b4\u00b5\7d\2\2\u00b5\u00b6"+
        "\7t\2\2\u00b6\u00b7\7g\2\2\u00b7\u00b8\7c\2\2\u00b8\u00b9\7m\2\2\u00b9"+
        "*\3\2\2\2\u00ba\u00bb\7e\2\2\u00bb\u00bc\7q\2\2\u00bc\u00bd\7p\2\2\u00bd"+
        "\u00be\7v\2\2\u00be\u00bf\7k\2\2\u00bf\u00c0\7p\2\2\u00c0\u00c1\7w\2\2"+
        "\u00c1\u00c2\7g\2\2\u00c2,\3\2\2\2\u00c3\u00c4\7v\2\2\u00c4\u00c5\7q\2"+
        "\2\u00c5.\3\2\2\2\u00c6\u00c7\7p\2\2\u00c7\u00c8\7q\2\2\u00c8\u00cb\7"+
        "v\2\2\u00c9\u00cb\7#\2\2\u00ca\u00c6\3\2\2\2\u00ca\u00c9\3\2\2\2\u00cb"+
        "\60\3\2\2\2\u00cc\u00cd\7k\2\2\u00cd\u00ce\7h\2\2\u00ce\62\3\2\2\2\u00cf"+
        "\u00d0\7g\2\2\u00d0\u00d1\7n\2\2\u00d1\u00d2\7u\2\2\u00d2\u00d3\7g\2\2"+
        "\u00d3\64\3\2\2\2\u00d4\u00d5\7y\2\2\u00d5\u00d6\7j\2\2\u00d6\u00d7\7"+
        "k\2\2\u00d7\u00d8\7n\2\2\u00d8\u00d9\7g\2\2\u00d9\66\3\2\2\2\u00da\u00db"+
        "\7h\2\2\u00db\u00dc\7q\2\2\u00dc\u00dd\7t\2\2\u00dd8\3\2\2\2\u00de\u00df"+
        "\7u\2\2\u00df\u00e0\7v\2\2\u00e0\u00e1\7g\2\2\u00e1\u00e2\7r\2\2\u00e2"+
        ":\3\2\2\2\u00e3\u00e4\7v\2\2\u00e4\u00e5\7j\2\2\u00e5\u00e6\7g\2\2\u00e6"+
        "\u00e7\7p\2\2\u00e7<\3\2\2\2\u00e8\u00e9\7x\2\2\u00e9\u00ea\7c\2\2\u00ea"+
        "\u00eb\7t\2\2\u00eb>\3\2\2\2\u00ec\u00ed\7v\2\2\u00ed\u00ee\7t\2\2\u00ee"+
        "\u00ef\7w\2\2\u00ef\u00f0\7g\2\2\u00f0@\3\2\2\2\u00f1\u00f2\7h\2\2\u00f2"+
        "\u00f3\7c\2\2\u00f3\u00f4\7n\2\2\u00f4\u00f5\7u\2\2\u00f5\u00f6\7g\2\2"+
        "\u00f6B\3\2\2\2\u00f7\u00f8\7v\2\2\u00f8\u00f9\7{\2\2\u00f9\u00fa\7r\2"+
        "\2\u00fa\u00fb\7g\2\2\u00fb\u00fc\7q\2\2\u00fc\u00fd\7h\2\2\u00fdD\3\2"+
        "\2\2\u00fe\u00ff\7f\2\2\u00ff\u0100\7{\2\2\u0100\u0101\7p\2\2\u0101\u0102"+
        "\7c\2\2\u0102\u0103\7o\2\2\u0103\u0104\7k\2\2\u0104\u0105\7e\2\2\u0105"+
        "F\3\2\2\2\u0106\u0107\7k\2\2\u0107\u0108\7o\2\2\u0108\u0109\7r\2\2\u0109"+
        "\u010a\7q\2\2\u010a\u010b\7t\2\2\u010b\u010c\7v\2\2\u010cH\3\2\2\2\u010d"+
        "\u010e\7p\2\2\u010e\u010f\7c\2\2\u010f\u0110\7v\2\2\u0110\u0111\7k\2\2"+
        "\u0111\u0112\7x\2\2\u0112\u0113\7g\2\2\u0113J\3\2\2\2\u0114\u0115\7c\2"+
        "\2\u0115\u0116\7t\2\2\u0116\u0117\7t\2\2\u0117\u0118\7c\2\2\u0118\u0135"+
        "\7{\2\2\u0119\u011a\7d\2\2\u011a\u011b\7q\2\2\u011b\u011c\7q\2\2\u011c"+
        "\u0135\7n\2\2\u011d\u011e\7k\2\2\u011e\u011f\7p\2\2\u011f\u0135\7v\2\2"+
        "\u0120\u0121\7p\2\2\u0121\u0122\7k\2\2\u0122\u0135\7n\2\2\u0123\u0124"+
        "\7q\2\2\u0124\u0125\7d\2\2\u0125\u0126\7l\2\2\u0126\u0127\7g\2\2\u0127"+
        "\u0128\7e\2\2\u0128\u0135\7v\2\2\u0129\u012a\7h\2\2\u012a\u012b\7n\2\2"+
        "\u012b\u012c\7q\2\2\u012c\u012d\7c\2\2\u012d\u0135\7v\2\2\u012e\u012f"+
        "\7u\2\2\u012f\u0130\7v\2\2\u0130\u0131\7t\2\2\u0131\u0132\7k\2\2\u0132"+
        "\u0133\7p\2\2\u0133\u0135\7i\2\2\u0134\u0114\3\2\2\2\u0134\u0119\3\2\2"+
        "\2\u0134\u011d\3\2\2\2\u0134\u0120\3\2\2\2\u0134\u0123\3\2\2\2\u0134\u0129"+
        "\3\2\2\2\u0134\u012e\3\2\2\2\u0135L\3\2\2\2\u0136\u0137\7>\2\2\u0137\u0138"+
        "\5K&\2\u0138\u0139\7@\2\2\u0139N\3\2\2\2\u013a\u0145\7>\2\2\u013b\u013c"+
        "\7>\2\2\u013c\u0145\7?\2\2\u013d\u0145\7@\2\2\u013e\u013f\7@\2\2\u013f"+
        "\u0145\7?\2\2\u0140\u0141\7?\2\2\u0141\u0145\7?\2\2\u0142\u0143\7#\2\2"+
        "\u0143\u0145\7?\2\2\u0144\u013a\3\2\2\2\u0144\u013b\3\2\2\2\u0144\u013d"+
        "\3\2\2\2\u0144\u013e\3\2\2\2\u0144\u0140\3\2\2\2\u0144\u0142\3\2\2\2\u0145"+
        "P\3\2\2\2\u0146\u0148\7/\2\2\u0147\u0146\3\2\2\2\u0147\u0148\3\2\2\2\u0148"+
        "\u0149\3\2\2\2\u0149\u014a\5S*\2\u014aR\3\2\2\2\u014b\u0154\7\62\2\2\u014c"+
        "\u0150\5_\60\2\u014d\u014f\5a\61\2\u014e\u014d\3\2\2\2\u014f\u0152\3\2"+
        "\2\2\u0150\u014e\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0154\3\2\2\2\u0152"+
        "\u0150\3\2\2\2\u0153\u014b\3\2\2\2\u0153\u014c\3\2\2\2\u0154T\3\2\2\2"+
        "\u0155\u0156\5Q)\2\u0156\u0158\7\60\2\2\u0157\u0159\5a\61\2\u0158\u0157"+
        "\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u0158\3\2\2\2\u015a\u015b\3\2\2\2\u015b"+
        "\u0163\3\2\2\2\u015c\u015e\7\60\2\2\u015d\u015f\5a\61\2\u015e\u015d\3"+
        "\2\2\2\u015f\u0160\3\2\2\2\u0160\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161"+
        "\u0163\3\2\2\2\u0162\u0155\3\2\2\2\u0162\u015c\3\2\2\2\u0163V\3\2\2\2"+
        "\u0164\u0167\5Y-\2\u0165\u0167\5[.\2\u0166\u0164\3\2\2\2\u0166\u0165\3"+
        "\2\2\2\u0167X\3\2\2\2\u0168\u016d\7$\2\2\u0169\u016c\5]/\2\u016a\u016c"+
        "\n\2\2\2\u016b\u0169\3\2\2\2\u016b\u016a\3\2\2\2\u016c\u016f\3\2\2\2\u016d"+
        "\u016b\3\2\2\2\u016d\u016e\3\2\2\2\u016e\u0170\3\2\2\2\u016f\u016d\3\2"+
        "\2\2\u0170\u0171\7$\2\2\u0171Z\3\2\2\2\u0172\u0177\7)\2\2\u0173\u0176"+
        "\5]/\2\u0174\u0176\n\3\2\2\u0175\u0173\3\2\2\2\u0175\u0174\3\2\2\2\u0176"+
        "\u0179\3\2\2\2\u0177\u0175\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u017a\3\2"+
        "\2\2\u0179\u0177\3\2\2\2\u017a\u017b\7)\2\2\u017b\\\3\2\2\2\u017c\u017d"+
        "\7^\2\2\u017d\u0184\t\4\2\2\u017e\u0180\7^\2\2\u017f\u0181\7\17\2\2\u0180"+
        "\u017f\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0184\7\f"+
        "\2\2\u0183\u017c\3\2\2\2\u0183\u017e\3\2\2\2\u0184^\3\2\2\2\u0185\u0186"+
        "\t\5\2\2\u0186`\3\2\2\2\u0187\u018a\5_\60\2\u0188\u018a\7\62\2\2\u0189"+
        "\u0187\3\2\2\2\u0189\u0188\3\2\2\2\u018ab\3\2\2\2\u018b\u018f\t\6\2\2"+
        "\u018c\u018e\t\7\2\2\u018d\u018c\3\2\2\2\u018e\u0191\3\2\2\2\u018f\u018d"+
        "\3\2\2\2\u018f\u0190\3\2\2\2\u0190d\3\2\2\2\u0191\u018f\3\2\2\2\u0192"+
        "\u0193\7\61\2\2\u0193\u0194\7,\2\2\u0194\u0198\3\2\2\2\u0195\u0197\13"+
        "\2\2\2\u0196\u0195\3\2\2\2\u0197\u019a\3\2\2\2\u0198\u0199\3\2\2\2\u0198"+
        "\u0196\3\2\2\2\u0199\u019b\3\2\2\2\u019a\u0198\3\2\2\2\u019b\u019c\7,"+
        "\2\2\u019c\u019d\7\61\2\2\u019d\u019e\3\2\2\2\u019e\u019f\b\63\2\2\u019f"+
        "f\3\2\2\2\u01a0\u01a1\7\61\2\2\u01a1\u01a6\7\61\2\2\u01a2\u01a6\7%\2\2"+
        "\u01a3\u01a4\7/\2\2\u01a4\u01a6\7/\2\2\u01a5\u01a0\3\2\2\2\u01a5\u01a2"+
        "\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a6\u01aa\3\2\2\2\u01a7\u01a9\n\b\2\2\u01a8"+
        "\u01a7\3\2\2\2\u01a9\u01ac\3\2\2\2\u01aa\u01a8\3\2\2\2\u01aa\u01ab\3\2"+
        "\2\2\u01ab\u01ad\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ad\u01ae\b\64\2\2\u01ae"+
        "h\3\2\2\2\u01af\u01b1\t\t\2\2\u01b0\u01af\3\2\2\2\u01b1\u01b2\3\2\2\2"+
        "\u01b2\u01b0\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b5"+
        "\b\65\3\2\u01b5j\3\2\2\2\33\2\u0087\u008d\u00ca\u0134\u0144\u0147\u0150"+
        "\u0153\u015a\u0160\u0162\u0166\u016b\u016d\u0175\u0177\u0180\u0183\u0189"+
        "\u018f\u0198\u01a5\u01aa\u01b2\4\b\2\2\2\3\2";
    public static final ATN _ATN =
        new ATNDeserializer().deserialize(_serializedATN.toCharArray());
    static {
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
        for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
            _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }
    }
}